#!/bin/sh
# First, stash index and work dir, keeping only the
# to-be-committed changes in the working directory.
old_stash=$(git rev-parse -q --verify refs/stash)
git stash save -q --keep-index
new_stash=$(git rev-parse -q --verify refs/stash)

# If there were no changes (e.g., `--amend` or `--allow-empty`)
# then nothing was stashed, and we should skip everything,
# including the tests themselves.  (Presumably the tests passed
# on the previous commit, so there is no need to re-run them.)
if [ "$old_stash" = "$new_stash" ]; then
    exit 0
fi

# Run tests
HOME=$(git rev-parse --show-toplevel)
cd $HOME
pytest
status=$?

# Restore changes
git reset --hard -q && git stash apply --index -q && git stash drop -q

# Exit with status from test-run: nonzero prevents commit
if [ $status -ne 0 ]; then
    echo -e "\e[31mCode NOT committed because the tests failed. If you need to bypass this, add --no-verify to the commit command.\e[0m"
fi
exit $status
